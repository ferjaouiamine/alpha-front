import"react";import"@material-ui/core/Avatar";import{_ as o,g as t,c as e,e as i}from"./_tslib-f3985d4d.js";import"@material-ui/core/styles";import"@material-ui/icons/Done";import"@material-ui/icons/Clear";import"@material-ui/core/Tooltip";import"@material-ui/icons/Info";import"clsx";import"@material-ui/lab";import"@material-ui/icons/ReportProblem";import"@material-ui/icons/Autorenew";import"@material-ui/core/Chip";import"chance";import"@material-ui/core/colors";import{writeFileSync as r}from"fs";import{option as a,dataset as m,size as n,pretty as s,output as p}from"commander";function l(l){a("-d, --dataset <dataset>",'A dataset can be "commodity" | "employee"',"employee").option("-s, --size <size>","The number of rows to generate","100").option("-o, --output <output>",'The output file, if not passed, it will generate "./<dataset>-<size>.json"').option("-p, --pretty","print a prettier output",!1).action((()=>{console.log(`Generating new ${m} dataset with ${Number(n).toLocaleString()} rows`),((r,a)=>o(void 0,void 0,void 0,(function*(){return(yield t(Number(r),"commodity"===a.toLowerCase()?e:i)).rows})))(Number(n),m).then((o=>{const t=p||`./${m}-${n}.json`;console.log("Saving generated dataset in "+t),r(t,JSON.stringify(o,null,s?2:void 0))}))})).parse(l)}export{l as datagenCli};
